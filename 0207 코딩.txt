목표 5문제

1.짝수와 홀수

내풀이

def solution(num):
    
    if num %2 == 0:
        return "Even"
    else:
        return "Odd"

# num%2 가 0이 아니면 True 이기 떄문에 
#  if (num%2):
        return "Odd"
    else:
        return "Even"

#가 성립한다.

2. 최대공약수와 최소공배수

풀이

def Exp(n, m):
    if n < m:
        (n,m)=(m,n)
    while m !=0:
        (n,m) = (m, n%m)
    return n
    
def solution(a, b):
    return [Exp(a,b), a*b/Exp(a,b)]

# 최대공약수와 최소공배수를 구하기위해 유클리드 호제법을 사용하였다.
#n이 m보다 작으면 (m,n)으로 위치변경 그리고 m이 0이 아니면 
# n%m의 나머지로 m을 나눈다 그리고 이것을 나머지가 0이될떄 까지 반복한다.
# 그리고 n을 반환 이것이 최대공약수
#  최소공배수는 n*m과 최대공약수를 나누는 것이다.




3. 콜라츠 추측

내 풀이

def solution(num):
    
    count = 0
    
    while num != 1:
        if num %2==0:
            num = num/2
            count +=1
        else:
            num = (num*3)+1
            count +=1
            
        if count > 500:
            return -1
            
    return count




4. 평균 구하기

내풀이

def solution(arr):
    if len(arr) ==0:
        return 0
    
    return sum(arr)/len(arr)




# 분모가 0일수 있으므로 return 0반환




5. 하샤드 수


풀이


def solution(x):
    
    return True if x % sum(map(int,str(x)))== 0 else False




# True 조건 x를 str문자열로 만들고 정수형으로 바꾼다음에 map 으로 리스트로 만듦
# 그 후 sum으로 합을 구함 그리고 이합으로 x의 나머지를 구해서 0이면 True
# 0이 아니면 False을 출력한다.



풀수있다면 풀기 추가문제



1. 행렬의 덧셈


풀이

def solution(arr1, arr2):
    
    Re = []
    
    for i in range(len(arr1)):
        for j in range(len(arr1[i])):
            arr1[i][j] = arr1[i][j] + arr2[i][j]
            
    return arr1

#이차원 행렬이므로 반복문 돌리고 난뒤에 덧셈을 해주면된다.

