
목표		// 주말에는 집에서 포너블 공부

1. 자릿수 더하기

내 풀이

def solution(n):

    change = str(n)
    result = []

    for i in range(len(change)):
        result.append(change[i])

    cha = list(map(int,result))
    su = sum(cha)

    return  su

해석

# 리스트의 문자열을 int(정수) 형태로 변환 list(map(int or str(문자열) , 변수)



다른 사람 풀이

def sum_digit(number):
    if number < 10:
        return number;
    return (number % 10) + sum_digit(number // 10) 

# 아래는 테스트로 출력해 보기 위한 코드입니다.
print("결과 : {}".format(sum_digit(123)));



2. 자연수 뒤집어 배열로 만들기

내풀이

def solution(n):				정리
    a = str(n)
    answer = list(map(int,a))			sort : 리스트 자료형의 함수. 리스트 요소를 정렬
    answer.reverse()				reverse : 리스트 자료형의 함수. 리스트 요소를 역순으로 정렬
    return answer				sorted : iterator의 요소를 정렬하여 리턴 하지만 원본은 변경하지 않는다. (파이썬 내장함수)
					reversed : iterator의 요소를 역순으로 리턴 하지만 원본은 변경하지 않는다. (파이썬 내장함수)

다른 사람 풀이				sort 원본을 바꿈 sorted 원본은 바꾸지않고 정렬해서 나타냄

def digit_reverse(n):			reverse도 원본을 바꿈 reversed 도 원본을 바꾸지않고 역순해서 나타냄
    return list(map(int, reversed(str(n))))


3. 정수 내림차순으로 배치하기

내풀이


def solution(n):
    
    return int(''.join(sorted(str(n), reverse = True)))


해석

# sorted로 str(n)을 오름차순 정리후 reverse로 역정렬 그리고
# ''.join으로 리스트 문자열을 합침 ex) '1' , '2' , '3' 을 '123'으로
# 그리고 int() 함수로 정수로 바꿔주면 된다.



4. 정수 제곱근 판별

내풀이

def solution(n):
    
    count = 0
    
    for x in range(1,n+1):
        if x **2 == n:
            count +=1
            return (x+1)**2
    if count == 0:
        return -1

나의 또 다른 풀이

def solution(n):
    

    for x in range(1,n+1):
        if x **2 == n:
            return (x+1)**2
    return -1




5. 제일 작은 수 제거하기

나의 풀이

def solution(arr):
    
    if len(arr) > 1:
        arr.pop(arr.index(min(arr)))
        return arr
    else:
        return [-1]

해석

# arr 길이가 1보다 크다면 arr의 최소값의 위치를 찾고 그것을 pop으로 꺼낸다
# 후에 제거한 배열(arr)을 리턴한다. 그 경우가 아니고 1보다 작을시 배열이기
# 떄문에 정수형 -1이 아닌 [-1]을 리턴한다.



풀수있다면 풀기 추가문제

1. 핸드폰 번호가리기

풀이 (다른사람 참고했음 이해 해야함)

def solution(phone_number):
    
    return '*' * len(phone_number[:-4]) + phone_number[-4:]


해석

# phone_number[:-4] 길이만큼 *으로 바꾸어주고 나머지 phone_number[-4:]  
#길이를 붙여주면 정답이된다.
# 예를들어 ***123456789 이면
#'*' * len(phone_number[:3]) + phone_number[3:] 이된다


