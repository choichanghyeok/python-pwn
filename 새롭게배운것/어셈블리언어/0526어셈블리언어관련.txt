1. 어셈블리언어 1강	2020 0526

## 명령어


근접한 하드웨어를 다루는것이 어셈블리어

CPU >> RAM >> 하드디스크

연산은 CPU	

1.( 내부 공간 > 레지스터(가장빠른저장공간) 즉 읽기 쓰기할떄 제일 빠름)
2. 대신 용량이 적음(RAM에 담음)
3. 여러연산은 레지스터에 저장후 결과를 연산


하드디스크 >> 자신이 했던 것들을 저장


#레지스터
32비트

범용레지스터

EAX	ESP	ESI
EBX	EBP	EBI
ECX
EDX


명령어

mov 레지스터, 값 >> 값 만큼 이동하라는 명령어

ex)

mov eax, 1

(step over 실행버튼	)

바로 실행이 가능하다는 장점이있음.


2. 어셈블리어 2강


##범용레지스터

EAX , EBX , ECX , EDX		<< 레지스터에다 값을 넣는 형태


REG(레지스터이름) 레지스터를 나타냄

ex) (mov reg , 값)

값 덮어씌우기

ex) mov eax,1

mov ebx,eax

이러한 형태


EAX(32비트)	AX(16비트)	AH()		AL()
전체공간
				AX중에 높은곳	AX중에 낮은곳

RAX ( 64비트)

32비트
EAX	EBX	ECX	EDX

16비트
AX	BX	CX	DX
하위(낮음) 1바이트
AL	BL	CL	DL
하위(높음) 1바이트
AH	BH	CH	DH


mov reg,reg

reg 끼리 서로 크기가 같아야 담을수있다.
(즉 크기가 다르면 안된다.)


다시 정리하자면

EAX(32비트 4바이트)

AX	BX	CX	DX	(16비트 2바이트)

하위(낮음) 1바이트			(8비트 1바이트)
AL	BL	CL	DL
하위(높음) 1바이트
AH	BH	CH	DH


사이즈를 굉장히 잘 작업해야한다.


기계어로 1vs1 번역을 하기떄문에 크기를 정확히 지켜주어야한다.




@@지금까지 mov 의 사용방방법과 범용레지스터의 내부구조까지 공부함.


