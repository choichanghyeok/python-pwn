1. 딥러닝 시작 1강	2020.0526


# 소개 or 기본개념


인공지능 > 인간의 학습능력 , 추론능력 등을 컴퓨터를 통해 구현하는 포괄적인 개념

머신러닝 > 데이터를 이용하여 명시적으로 정의되지 않은 패턴을 학습하여 미래결과(값,분포)를 예측

데이터마이닝: 데이터간의 상관관계나 속성을 찾는것이 주목적

딥러닝 > 머신러닝의 한분야로서 신경망을 통하여 학습하는 알고리즙의 집합




머신러닝 > Regression , Classification

회귀(Regression)

>> 연속적인 데이터를 학습하여 이를 바탕으로 미래에 임의의 데이터가 올경우 예측하는 경우이다.

분류(Classification)

>> 데이터의 분포를 학습하고 이러한 바탕으로 미래의 임의의 데이터가 올경우 이 데이터가 어디에 속하는지 알려주는 경우이다.

딥러닝(Neural Network)

>> 신경망은 인간의 뇌 세포 상호작용을 모방함

이전 뉴런 출력을 각각 입력으로 받아 (+또는 -) 가중치를 통해 전체의 합을 합하여 입계치를 넘으면 다음 뉴런으로 전달하는 원리이다.




@@@@@@@@@@@@@@@@@@@@@@@

머신러닝 / 딥러닝 >> 이번 수업은 파이썬으로 구현 

@@@@@@@@@@@@@@@@@@@@@@@

머신러닝 프레임워크 사용단점

>> 머신러닝의 알고리즘을 API로 추상화 함으로서 개발을 쉽고 빠르게 할수있지만 동장원리와 내부구현을 자세히 알수없다 즉 블랙박스로서 동작한다.

파이썬 직접 구현시 장점

1. 머신러닝 동작원리를 자세히 알수있어 재미있으며 동시에 알고리즘에 대한 깊이 이해가 가능

2. 새로운 머신러닝 알고리즘이 나왔을떄 빠르게 코드를 이해할수있는 통찰력을 획득한다.



구현할려면 사전지식이 필요함

1. 프로그래밍 개념 (변수,데이터타입,제어문,함수,클래스,라이브러리 등의 개념)

2. 기본 수학개념 ( 일차함수 , 지수함수 등등 시그마, 파이 등)

3. 행렬연산 (산술 연산, 행렬 곱(dot product))





2. 딥러닝 2강

데이터타입(data type)

1.list

리스트 > 다른 프로그래밍 언어의 배열과 비슷한성질을 갖는 데이터타입

< 슬라이스랑 같이사용함 >(파이썬 리스트에는 -인덱스를 지원해서 마지막부터 역순으로 값을 참조할수있음)

그리고 각요소의 데이터타입을 다르게해서 생성이 가능, 리스트안에 리스트를 포함할수있음


2. tuple

튜플 > 리스트는 [ ] 튜플은 ( ) 

리스트는 원소를 변경할수있지만 튜플은 변경할수없는 고유의값이다.

3. string

스트링 > ' '이나 " " 으로 생성

문자열내의 각각의 값 또한 문자열로 인식되며 문자열을 분리하여 list로 반환하는 split() 함수는 머신러닝 코드에서 문자열 데이터
전처리 하기 위해 자주 사용됨


예제

type(data) > date 타입을 알려주는합수

len(data) > 데이터의 길이(요소개수)를 알려주는 함수

size(data) > 모든원소의 개수를 알려주는 함수

list(data) > data를 리스트로 만들어 리턴하는 함수

str(data) > 입력되는 data를 문자열로 변환하는 함수

int(data) > 입력되는 data를 정수형으로 변환하는 함수



3. 딥러닝 3강 

##조건문, 반복문

조건문 > if

> 파이썬은 코딩블럭을 표시하기위해 들여쓰기를 사용, 즉 C나 java와 같이 코딩블럭을 { } 을 사용하지않음.

> 모두 동일한 공백을 사용해야함 어떤 공백은 tap 어떤공백은 백스페이스 이런식으로 코드를 작성하면 오류가 생김


반복문 > for

2가지 형식이 있음

1. for a in range():			# rnage(10) 이라면 0~9까지 

2. for a in list,dict:			


반복문 list comprehension

> 리스트의 [...] 괄호안에 for 루프를 사용하여 반복적으로 표현식을 실행해서 리스트 요소들을 정의하는 방법을 List comprehension
이라 하며 , 머신러닝 코드에서 자주 사용되는 기법이다.

ex) list_data = [ x**2 for x in range(5) 		#0 1 2 3 4  이므로 출력하면  0 1 4 9 16


반복문 while , break , continue

while > 반복문 (1 참 0 거짓)

중간에 그만두자 하면 break 를 사용하면되고 계속진행하고싶다고한다면 continue 를 사용하면된다.





4. 딥러닝 4강


## 함수 람다

함수 정의 > 특정기능을 수행하는 함수는 파이썬에서 다음과 같이 정의

def 함수이름(입력1,입력2,...)


함수 반환 값 > 파이썬 함수는 한개 이상의 return 값을 반환할수 있고 retrun 값은 ,로 분리하여 받거나  tuple 형태로 받을수있다.


default parameter

> 함수의 입력 파라미터에 기본 값을 지정하는 것이고
이러한 디폴트 파라미터는 함수가 호출되었을경우 입력파라미터에 명시적인 값이 전달 되지 않으면 기본으로 지정한 값을 사용하겠다는 의미

mutable / immutable parameter

>> 입력 파라미터가 mutable(list,dict,numpy 등) 데이터형인 경우는 원래의 데이터에 변형이 일어남

immutable(숫자,문자,tuple 등)은 원래의 데이터에 변형이 일어나지 않음



lambda > 람다는 한줄로 함수를 작성하는 방법으로 익명함수 또는 람다 표현식 등으로 불린다.

람다는 다른함수의 인수로 넣을떄 주로 사용하며 특히 머신러닝에서 미분을 계산하기 위해 필요한 수치 미분과 활성화
f(x), f(x,y) 등으로 사용되며 마지막표현으로 대체된다는 의미이다.

ex)

def a():
	print("hello")
def test(s,t):
	print("input1 ==", s, ", input2==",t)

s = 100		# s,t 선언이 없거나 할당이 없으면 에러
t = 200

fx = lambda x, y : teㄴt(s,t)		# fx(x,y)=test(s,t)
fy = lambda x, y : a()		#fy(x,y)=a()

fx(500,100)
fy(300,600)

출력은 > 
input1 == 100   ,   input2 == 200
hello




5. 딥러닝 5강

## 클래스

파이썬 클래스는 class 키워드를 사용하여 자신만의 데이터타입을 만들수있다.

ex)

class 클래스이름:

	def __init__(self,인수,...):	# 생성자
	def 메서드 이름(self,인수,...)	# 메서드



1. 파이썬 클래스에서는 __init__ 메서드가 생성자 역할을 수행 (즉 인스턴스가 만들어질떄 한번만 호출됨)

2. 파이썬에서는 클래스 메서드의 첫번쨰 인수로 자신의 인스턴스를 나타내는 self 를 반드시 기술해야함

3. 기본적으로 파이썬에서는 메서드와 속성 모드 public



클래스 변수 > 해당클래스로 생성된 모든 인스턴스가 공통으로 사용하는 변수

>> 클래스 변수는 클래스내외부에서 클래스명.클래스 변수명 으로 접근이 가능함

클래스 메서드 > 메서드 앞에 @classmethod 를 반드시 표시하여 해당 메서드가 클래스 메서드임을 표시해야함.

클래스 메서드는 객체 인스턴스를 의미하는 self 대신 cls라는 클래스를 의미하는 파라미터를 인수로 전달받음. 

ex)

@classmethod
def getCount(cls):
	return cls.count



파이썬 클래스는 기본적으로 모든 멤버가 public 이기 떄문에 외부에서 직접접근 가능함


멤버 변수 > 멤버메서드를 __멤버변수__, 	  >	__멤버 메서드 형태로 선언한다면 private 으로 설정할수있음.

private > 외부 접근만 못함 내부에서는 가능함


외부 함수와 클래스 메소드 이름이 같은경우

>> c++ , java 언어의 this 처럼 self를 통해 메소드를 호출

self를 붙이지 않으면 동일한 이름의 외부 함수가 호출됨


ex)

def a(name):

	print("[def]", name)
class same:
	def __init__(self):
		pass
	def a(self,name):
		print("[same]",name)
	def call(self):
		a("kim")
		self.a("kim")

obj = same()
a("LEE")
obj.a("LEE")
obj.call()

형식으로 사용한다.



@@@@

exception  예외처리

> 파이썬에서 exception은 try..except문을 사용하는데 try블록에서 에러가 발생 시 except문으로 이동하여 예외처리를 수행한다.

발생된 exception 을 그냥 무시하기위해서는 보통 pass문을 사용하며 또한 개발자가 에러를 던지기위해서는 raise문을 사용한다.

raise >  오류를 만듦		( 디버깅 용도 )

try문은 또한 finally문을 가질수도 있는데 , finally 블럭은 try블럭이 정상적으로 실행되는 에러가 발생하여 except이 실행되는 
항상 마지막에 실행되는 구문이다.


with 구문

>> 일반적으로 파일 또는 세션을 사용하는 순서는

open() = > read() or write() = > close() 인데

그러나 파이썬에서 with 구문을 사용하면 명시적으로 리소스 close() 를 해주지 않아도 자동으로 close() 해주는 기능이 있다.
with 블록을 벗어나는 순간파일 파일이나 세션등의 리소스를 자동으로 close 시킨다.

@딥러닝 프레임워크인 TensorFlow 의 session 사용시 자주 사용된다.

ex)

#일반적인 방법
f=open("./file_test", 'w')
f.write("Hello, python !!!")
f.close


#with 구문을 사용한방법
#with 블록을 벗어나는 순간 파일 객체 f가 자동으로 close가 됨

with open("./file_test", 'w') as f:
	f.write("Hello, Python !!!")






