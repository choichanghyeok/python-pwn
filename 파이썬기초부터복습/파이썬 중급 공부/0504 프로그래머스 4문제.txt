1. 오픈채팅방

def solution(records):
    answer = []			## 답란 만들어놓기
    user= dict()			## 채팅방 표기를 위해 딕셔너리 만들어놓기
    chat= []			## ~~이 나갔습니다 들어왔습니다 표기를 위해 chat 배열 만들어놓기
    enter = "%s님이 들어왔습니다."
    exit = "%s님이 나갔습니다."		# log 설정
    for record in records:
        relist=record.split(' ')			# 들어온 records 들을 리스트로 만들어놓음
        if relist[0] == 'Enter':			# Enter 일떄 user 딕셔너리에 user[relist[1]]을 relist[2]로 만들고
            user[relist[1]]= relist[2]		# relist 는 user name 을 뜻함
            chat.append([enter,relist[1]])		# 그대로 enter 변수와 , relist[1] >> 닉네임 을 보낸다.
        elif relist[0] == 'Leave':			# Leave가 입력됬을 떄도 enter과 마찬가지로 똑같이한다.
            chat.append([exit,relist[1]])
        elif relist[0] == 'Change':		# change의 경우 user의 이름을 바꿔준다.
            user[relist[1]]= relist[2]
    for log in chat:
        answer.append(log[0] % user[log[1]])	# answer의 답란에 우리가 저장했던 enter과 leave 가 log[0]이고
    return answer				# user[log[1]]이 닉네임이므로 이렇게 완성해서 answer에 보낸다
	














2.짝지어 제거하기


def solution(s):
    answer = []			# 스택을 담을 배열을 만들어놓는다.
    
    for i in s:
        if len(answer)==0:		# 스택이 비어있다면 문자열 i를 보냄
            answer.append(i)
        elif answer[-1]==i:		# 문자열이 들어가고 들어간 문자열과 현재 진행중인 i와 같다면
            answer.pop()		# pop으로 제거
        else:
            answer.append(i)		# 위의 상황이 아니라면 그대로 다시 answer배열에 보냄
    if len(answer)==0:
        return 1			# 일련과정 반복으로 모든 스택이 없어졌다면 1을 반환
    else:
        return 0			# 아니라면 0을 반환











3. 소수만들기


def sosu(s):            # 소수 구하는 알고리즘
    for i in range(2,s):
        if s%i ==0:                 #  s가 i에게 나누어 떨어지면 소수가 아니다.
            return False
    return True

def solution(nums):
    L = len(nums)           # 길이만큼 돌려야하므로 변수를 만들어 저장
    s = 0               # 총합
    cnt = 0             # 소수 갯수
    for i in range(L):
        for j in range(i+1,L):  # 모든 경우의수를 따져봄 
            for k in range(j+1,L):
                s+=nums[i]+nums[j]+nums[k]      # 다 더하고 소수판별했을떄 소수라면 cnt 1증가
                if sosu(s)==True:
                    cnt +=1
                s = 0                       # 다시 총합 s는 0으로 만들어두고
    return cnt          # 반환
    














4.JadenCase 문자열 만들기


내가 짠코드 (틀림 다틀렸음 해당 문제만 돌아감)


def solution(s):
    
    answer = []
    s = s.split()
    L = len(s)
    for i in range(L):
        if s[i][0].islower():
            a = s[i][0].upper()
            c = s[i][1:].lower()
            answer.append(a+c)
        else:
            answer.append(s[i])
    
    return " ".join(answer)





정식 풀이



def solution(s):
    
    s = s.lower()
    Li = s.split(" ")
    answer = ""
    
    for i in Li:
        i = i.capitalize()      
        #Capitalize - 모든 단어의 첫 글자가 대문자인 문자열을 반환합니다. 'My Little Pony' 를 반환하는 함수!!!.
        answer += i+" "
    
    return answer[:-1]          # answer[:-1] 하는 이유는 띄어쓰기 때문이다 답은 나왓지만 마지막에 ' ' 공백이  있기때문에 -1까지                                         반환하면 공백을 지울수있다.









