1. 21강

>> 반복문과 이중 반복문에대해서 다시 공부함

특정 범위를 계속 돌린다 라고한다면 나머지연산자를 사용한다.

반복문과 조건문은 같이사용할수있다!!

ex) 

nums = [1,2,3,4,5,6,7,8,9]
out = [[],[],[]]

for num in nums:
	out[(nums-1)%3].append(nums)

a[??] 배열에서  '/' 연산자는 안되고 정수 나누기 연산자만 가능하다. 즉 '//' 연산자 '+' , '*' , '-' 는 당연히 다 가능하다.

반복문 연습 별로 탑쌓기


for i in range(5):
    for j in range(i+1):
        if i ==j:
            print("*"*(j+1), end='\n')



2. 22강


파이썬 코드 흐름 읽는 훈련

위에서 아래로 읽어준다 편하게 알아보기편하게 에디터창 한개를 더 만들어서 필기해두면 좋다. 

또 실행순서를 숫자로 적어놓는것도 또하나의 방법이다.

*************************************************************************************************************************
만약 자바 클래스부분이나 C언어 포인터에서 많이 막힌다면 앞부분 코드의 흐름부터 이해하고 다시 공부해보자. *
*************************************************************************************************************************


3. 23강

딕셔너리에 대한 공부

리스트 [] 괄호로 만들고 딕셔너리는 {} 괄호로 만든다.

딕셔너리 : >> "키 : 값"


사용법은 딕셔너리["키"] 히먄 그 키와연결된 값이 나온다.

********************************************
선언후에 아래에서 값을 변경할수있다.
********************************************
★딕셔너리 선언
딕셔너리 = {"문자열":"값", 273:[1,2,3,4], True:False}


딕셔너리의 값을 추가할떄는 

★요소추가
딕셔너리["키"] = "값" 이라고 입력하면 추가된다.

딕셔너리의 값을 삭제할떄는

★요소제거
삭제하려면 del 딕셔너리["키"] 라고 입력하면 된다.

딕셔너리에서 get함수를 쓰면 내부에 관련된내용이 없을시 none를 출력
ex) 딕셔너리.get("키")

format() 함수 정말 많이 이용함.

4. 25강

range() 에 대해서


range(시작 , 끝 , 단계) >> range(0 , 10 ,1)   >> 이건 0부터 시작해서 10까지 1씩 증가


range는 정수만 쓸수있음 만약 쓰고싶다면 "//" 같은 수식을 써야함.

reversed() >> 역정렬 함수


5. 26강

while 반복문에 대해서
ex)
while True:
	print("," , end="")

********************************************
컨트롤 + C 무한반복 중지
********************************************

while 반복문에 in사용 가능  
ex) 

num = [1,2,1,1,3,3,1,2,4]

while 1 in num:
	num.remove(1)


6. 27강

break 키워드와 continue

break >> (특정조건에) 반복문에서 강제적으로 벗어남

continue >> (특정조건에) 현재반복을 중지하고 다음 반복을 실행

************************************************************************************************************************************
다른 언어에서 >> continue 가 잘안쓰이는 이유는 이 키워드를 쓰는것보다 코드이해가 쉽고 의미없을떄가 많다.
************************************************************************************************************************************

파이썬에서는 continue를 쓰는데 들여쓰기 때문이다.

반복횟수가 예상이될떄 for 반복문 사용

예상치 못할떄 while문 사용


# 1부터 100까지 하나씩 곱해서 나오는 최댓값

max_va = 0
a=0
b=0

for i in range(1,100):
    j= 100-i
    if max_va < i*j:
        max_va = i*j
        a=i
        b=j
print("{} * {} = {} 최댓값".format(a,b,max_va))





















