1. 29강 


함수

min()	>> 최소를 구하는 함수


nax([])	>> 최대를 구하는 함수

sum()	>> 합을 구하는 함수

reversed()		>> 리스트 뒤집기		ex) 이 자체적인 reversed()로 역순이 가능하지만 (xxx, resverse = True) 방식으로도 사용가능

**********************************************
reversed()는

(1회용함수) >> 한번쓰면 빈곳이 되어버림

일회용함수를 제너레이터라고함.

**********************************************

enumerate()	>> 현재 인덱스가 몇번째인지 확인하는 함수	)) 즉 배열값에 순서를 정해줌 즉 

또 for i, element in enumerate(리스트): 형태로 쓰임

a= [1,2,3,4] 라면

*******************************************************

enumerate(a)라면 (0,1)  (1,2)  (2,3)  (3,4) 가 된다.

*******************************************************

items()		>> 딕셔너리로 쉽게 반복문 작성하기

ex) for key,value in 리스트.ltems(): 
	print("{}키의 값은 {} 입니다.".format(key,value))

이형태로 쓰임.



2. 30강


리스트 내포란?

ex)

1.
array = []
for i in range(0,20,2):
	array.append(i*i)

라는 코드가 있다면 이것을 리스트 내포로

2.
array= [i*i for i in range(0,20,2)]
print(array)

1번코드와 2번코드는 같은것이다. 이렇게 한줄로 줄일수있다.

*********************************************************************************************
또 array = [1 for i in range(10)]  같은경우는 내부의요소 1로 10번 돌려달라고하므로

1이 10번 실행된다.

또 조건을 넣어줄수있다. [i1 for i in range(10) if i%2==0] 이러한식으로 조건도 넣어줄수있다.
 
*********************************************************************************************

10진수를 2진수로 변환하는 방법

"{:b}".format(10) 을 입려하면 '1010'으로 2진수로 변해서 나온다.

또 2진수를 10진수로 변환하는 방법은

int("1010", 2)를 했을때 10이 나온다.


count() 함수는 문장안에 특정지정문자가 몇개있는지 확인하는 함수


ex) "{:b}".format(i).count("0") ==1: 형식으로 쓸수있다.		(0이 1개만있는 이진수를 출력)


(반복문의 합 같은거 구할떄 리스트내포 사용가능)



3. 32강~33강


가변매개변수는 무조건 뒤에온다.



디폴트 매개변수(기본매개변수)

기본매개변수는 마지막에와야함.


*********************************************************************************************************************************

기본매개변수와 가변매개변수를 조합

ex)
print(앞쪽에있는것들이 가변매개변수이고 뒤쪽에있는것들이 기본매개변수이다.)

def fun(일반매개변수A,일반매개변수B,*가변매개변수,기본매개변수A=10,기본매개변수B=20):
	print(일반매개변수A,일반매개변수B)
	print(가변매개변수)
	print(기본매개변수A, 기본매개변수B)


키워드 매개변수(여러함수들이 어떤기능을 가지고있는지 기억하기)

print("1,2,3,4", sep="||")

>> '1||2||3||4' 가 나옴


*********************************************************************************************************************************

4. 34강


return >> 왔던곳으로 돌아가라 라는뜻.

retrun 문이 있다면 프로그램 종료


아무것도 리턴하지않거나 키값이 없다면 none을 출력

함수의 기본형태

def 함수(매개변수):
	변수 =초깃값
	매개변수1
	매개변수2
	return 변수

형태


>> 어떠한상황에도 종속을받지않는 함수를 순수한함수라고 한다.

앞에 *을 붙인 변수를 가변매개변수라고함.




5. 35강


재귀함수

ex) n!   n팩토리얼

n! = 1*2*3*......(n-2)*(n-1)*n

함수로 만든다면.

def fat(n)
	변수 = 1
	for i in range(1, n+1):
		변수 *=i
	return 변수

또 n! = n *(n-1)! 의 경우

def fact(n)
	if n ==0:
		return 1
	else:
		return n * fact(n-1)


이러한 형태의 코드가 나오게됨


피보나치 수열의 경우

f(1) = 1
f(2) = 1
f(n) = f(n-1) + f(n-2)	>> 이러한 형태이다.

>>	(이걸사용하면 꽃잎의 개수라던가 나뭇가지의 개수도 알수가있다.)

이걸 함수형태로 구현을 한다면

def f(n):
	if n==1 or n==2:
		return 1
	else:
		return f(n-1) + f(n-2)

라는 형태의 코드가 나오게 된다.

다만 이러한 코드로 많은수를 f(40) 같은 경우 컴파일이 너무 느려진다. 그러므로 엄청 비효율적이다.

효율적으로 계산하기위해 이미 한번계산했던 내용을 처음투버하는것이아니라 특정변수에 저장시키고 그것을 다시 쓴다.

그것을  Dp 역동적 프로그래밍이라고한다.

코드로 짠다고한다면

메모 = {1:1,2:1}

*****************************************************************************************************************************************************************
def f(n):
	if n in 메모:
		return 메모[n]
	else:
		output =  f(n-1) + f(n-2)
		메모[n] = output
		return output

형태로 코드를 짜주면된다. 이렇게 하면 위에 재귀함수를 사용해서 높은 횟수를 넣으면 10초이상이 걸리지만 DP를 사용하면 금방금방 나온다.

DP사용하는게 훨씬 효율적이다.

그리고 또

def f(n):
	if n in 메모:
		return 메모[n]
	output =  f(n-1) + f(n-2)
	메모[n] = output
	return output

이러한 형식으로 쓸수있다. 

이런 형태의 코드를 "조기리턴" 이라고한다. 

들여쓰기를 많이 줄여주는 기법이다.

********************************************************************************************************************************************************************







