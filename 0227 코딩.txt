
( 금요일날 마무리 하고 인강영상 보기)

1. 구명보트



풀이

def solution(people, limit):
    people.sort()
    l =len(people) # people 길이
    low = 0 # 가벼운 사람
    hav = l-1 # 무거운 사람 배열은 0부터시작하기떄문에 -1해줌
    
    cnt = 0
    while(low < hav):
        if people[low]+people[hav] <= limit:
            cnt +=1
            low +=1
            hav -=1
        else:
            hav -=1
    return l - cnt





# 탐욕법으로 최선의수를 구해야하기떄문에 일단은 people를 sort()로 정렬해준다. 그리고 l이라는 변수로
# people의 길이를 구해주고 low라는 변수로 가벼운사람 hav라는 변수로 무거운사람을 정해주고
# cnt라는 100kg 를 초과하지않는 경우를 센다. 그리고 기본적으로 다 무거운사람이라고 가정하고
# l-1을 해주고 시작한다 low가 hav보다 클떄까지 반복한다. 만약에 people[low]+people[hav] <= limit:
# 라면 cnt와 low는 증가하고 hav는 무거운 경우가 나왔으니 감소한다. 다른경우는 다 100kg를 초과하는
# 경우 이믈 -1해준다 그리고 100kg를 초과하지 않는 경우 와 전체길이를 빼주면 답이나온다.
# 이유는 100kg를 초과하는 사람은 혼자서 구명보트를 타고 가야하기떄문이다.





2. 위장



풀이



from collections import Counter   
from functools import reduce

def solution(clothes):
    cnt = Counter([kind for name , kind in clothes])
    answer = reduce(lambda x,y: x*(y+1), cnt.values(), 1) -1
    return answer 




# 배열들을 잘 정리할수있게 from collections import Counter 기능을 쓴다. 그리고 이 정리한 딕셔너리
# 들을 잘사용할수있게 from functools import reduce까지 같이 써서 람다식을 만들어주면 된다.
# 따라서 cnt라는 변수를 만들고 Counter기능을 써서 리스트를 묶어준다. 그리고 answer이라는 변수에
# reduce를 써서 람다식을 만들어 cnt의 딕셔너리에 있는 values()값을 이용 그리고 초기값 1을 설정하고
# 아무것도 안입는 경우 -1을 해주고 answer을 리턴하면된다.


