

2.문자열 압축


이해 x 나중에 다시보고 이해하기	(민욱이 or 근오에게 도움 요청)

사이트

https://www.snoopybox.co.kr/2052


풀이







4. 실패율		(수요일)


풀이

def solution(N, stages):
    buffer = {}
    total = len(stages)
 
    for i in range(1, N + 1):
        if total != 0:
            cnt = stages.count(i)
            buffer[i] = cnt / total
            total -= cnt
        else:
            buffer[i] = 0
            
    answer = sorted(buffer, key=lambda x: buffer[x], reverse=True)
    return answer


정리 설명

# buffer의 변수를 만들어 배열공간을 만들고 total이라는 stages의 길이를 선언한다. 그 후 길이만큼 반복문을 돌리고
# total 즉 길이가 0일떄 배열[i]는 0을 반환하고 0이 아닐떄 배열 [i]는 실패율을 구하기위해 스테이지 개수를 세야한다
# 따라서 stages.count(i)로 개수를 센다 그리고 버퍼의 공간에 1: 실패율 2: 실패율 처럼 넣는다.
# 그후 길이에서 cnt만큼 뺀다. (사용한 길이만큼) 그리고 마지막으로 최종 변수 answer을 선언하고
# sorted로 배열을 정렬후 key의 람다식으로 설정한 후 reverse = True로 내림차순 정리후 리턴한다.



5. 다트게임	(수요일)

			#isdigit() >> 숫자로된 문자열 판별
			#isnumeic() >> 문자열이 숫자로 구성되어있는지 판별 isdigit()와 유사
풀이


def solution(dartResult):
    
    answer = []
    mon = ''
    
    for i in dartResult:
        if i.isnumeric():
            mon += i
        elif i == 'S':
            answer.append(int(mon)**1)
            mon = ''
        elif i == 'D':
            answer.append(int(mon)**2)
            mon = ''
        elif i == 'T':
            answer.append(int(mon)**3)
            mon = ''
            
        elif i == '*':
            if len(answer) > 1:		#>> 아직 이해가 덜됨 물어보기
                answer[-2] *=2		#(근오한테 물어보기)
            answer[-1] *=2
        elif i =='#':
            answer[-1] *=-1
            
    return sum(answer)
            

# 문자열에서 일어나는 일이기떄문에 answer의 배열을 만들고 mon = ''을 만든다. 그리고 반복문을 돌린다  
# 또 i의 경우 이게 숫자인지 문자인지 판별하고 숫자라면 그대로 mon에다가 더한다. 만약 문자라면 그것이 SDT중 하나라면
# answer배열에 숫자를 판별하고 더한 mon에 해당 제곱만큼 하고 answer배열에 보낸다. 만약 *이라면 
# answer길이가 1이상 이라면 answer[-2]에 *2 해준다 아니라면 [-1]에 *2를 해준다. 또 #이라면 -1을
# 곱한다. 그리고 마지막으로 sum으로 answer을 합하고 리턴한다.

# if len(answer) > 1:		
#                answer[-2] *=2		
 #           answer[-1] *=2

# 이부분 은 그전에 append 한게있다면 if문으로 들어가고 없다면 탈출한다
# 따라서 append한게 있다면 전판에 했던 결과에 *2를 하고 없다면 이프문을 탈출해서
# 최근에 한판에 *2를 하면된다.


