
1.   전화번호 목록


풀이


def solution(phone_book):
    phone_book.sort()
    for i in range(len(phone_book)-1):
        if phone_book[i] in phone_book[i+1]:
            return False
    return True


# 주어진 전화번호목록을 먼저 정렬한다 그리고 1부터 시작하므phone_book 길이 -1만큼 반복한다.
# 그리고 비교를 시작하는데 phone_book[i]에 phone_book[i+1]즉 접두사가 있다면 False을 반환하고
# 그것이 아니라면 True를 반환한다.





2. H - index


풀이


def solution(citations):
    for i in range(max(citations), -1 , -1):
        h = 0 # 인용 카운팅
        for k in citations: # citations만큼 반복문 돌려
            if k >= i:
                h +=1
            if h == i:
                return h



# 주어진 논문이용횟수 의 최댓값에서 부터 -1씩 감소하면서 0까지 반복문을 돌린다.
# h는 논문을 얼마나 이용했는지 나타내는 카운트이며 이제 몇번 이용했는지 알아보기위해 
# citations만큼 반복문을 돌린다 그리고 만약 k가 i보다 크거나 같으면 카운트가 올라가고
# 카운트와 i가 만약에 같다면 카운트를 반환한다.

** 이경우는 테스트 9번이 실패한다.




다른풀이

def solution(citations):
    citations.sort(reverse = True)
    print(citations)
    for i,k in enumerate(citations):
        if i >= k:
            return i
    return i+1

# citations.sort(reverse = True) 으로 정렬후 역순정렬을 해주고 enumerate()로 정리해준다 0 1 1 5 이런식으로
# enumerate()는 보통 배열이나 정렬을 할떄 많이 쓰이고 순서 i 가 값 k보다 클때 그것이 최소기준 아래로 떨어진
# 기준점이므로 그대로 i를 리턴해준다 만약 한자리수라서 i가 0이나오면 0이될수없으니 +1을 해준다.
# 그대로 리턴해준다.























